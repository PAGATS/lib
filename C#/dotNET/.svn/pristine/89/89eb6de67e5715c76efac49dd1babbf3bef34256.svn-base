using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using CH.IO.Comm;
using CH.IO.Service;

namespace AS5216Server
{
    public partial class UI : Form
    {
        void ConnectIPC()
        {
            try
            {
                CHSock.CONFIG s_config = new CHSock.CONFIG();
                s_config.receiver = false;
                s_config.remoteIPAddress = g.config.strIPC_IP;
                s_config.remotePort = g.config.nIPC_Port;
                g.sock.Open(s_config);

                IPC.CONFIG i_config = new IPC.CONFIG();
                i_config.type = typeof(AS5216ServerMemory);

                g.ipc.OnMsg += new INTERFACE.MsgEventHandler(ipc_OnMsg);
                g.ipc.OnError += new INTERFACE.ErrorEventHandler(ipc_OnError);
                g.ipc.Connect(g.sock, i_config);
            }
            catch (System.Exception ex)
            {
                Error("ConnectIPC", ex);
            }
        }

        void ipc_OnError(object sender, string source, Exception err)
        {
            try
            {
            }
            catch (System.Exception ex)
            {
                Error("ipc_OnError", ex);
            }
        }

        void ipc_OnMsg(object sender, string type, object msg)
        {
            try
            {
                if (type == typeof(AS5216ServerMemory).FullName)
                {
                    return;
                }

                switch(type)
                {
                    case "CONNECTED":
                        {

                        }
                        return;
                    case "DISCONNECTED":
                        {
                            ConnectIPC();
                        }
                        return;
                    case "Lamda":
                        {
                            for(int i = 0 ; i < g.nAvsCount ; i++)
                            {
                                g.SharedMemory[i].Address = "Lamda";
                                g.SharedMemory[i].Offset = i;
                                g.SharedMemory[i].Spectrum = g.avs[i].GetLambda;
                                g.ipc.Send(typeof(AS5216ServerMemory), g.SharedMemory[i]);
                            }
                            
                        }
                        return;
                }
            }
            catch (System.Exception ex)
            {
                Error("ipc_OnMsg", ex);
            }
        }

        void DisconnectIPC()
        {
            try
            {
                g.ipc.Disconnect();
                g.ipc = new IPC();
            }
            catch (System.Exception ex)
            {
                Error("DisconnectIPC", ex);
            }
        }
    }
}
