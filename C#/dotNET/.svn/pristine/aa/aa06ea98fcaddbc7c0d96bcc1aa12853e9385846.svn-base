using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

using CH.Data;
using CH.IO.Comm;
using CH.IO.Service;

namespace CH.IO.Service
{
    public class IPC : INTERFACE
    {
        private class VARIABLE
        {
            public CONFIG config = null;
            public DEVICE OpenDevice = null;
            public MemoryStream MemStream = null;
        }
        private VARIABLE g;

        public class CONFIG
        {
            public Type type = null;
        }
        
        public IPC()
        {
            try
            {
                g = new VARIABLE();
            }
            catch
            {
                throw;
            }
        }

        // Standard Method for POSIX
        public override int Connect(DEVICE openDevice, object config)
        {
            try
            {
                g.config = (CONFIG)config;
                g.OpenDevice = (DEVICE)openDevice;
                g.OpenDevice.OnMsg += new DEVICE.MsgEventHandler(OpenDevice_OnMsg);
                g.OpenDevice.OnError += new DEVICE.ErrorEventHandler(OpenDevice_OnError);
                return 0;
            }
            catch
            {
                throw;
            }
        }

        public override int Send(Type type, object RegisteredClass)
        {
            try
            {
                if (null != g.OpenDevice && true == IsConnection)
                {
                    using (MemoryStream ms = new MemoryStream())
                    {
                        XmlSerializer xs = new XmlSerializer(type);
                        xs.Serialize(ms, RegisteredClass);
                        ms.Flush();
                        if (g.OpenDevice.IsOpen)
                        {
                            g.OpenDevice.Write(ms.GetBuffer(), 0, (int)ms.Length);
                        }
                        ms.Close();
                    }
                    return 0;
                }
                return -1;
            }
            catch
            {
                throw;
            }
        }


        public override int Disconnect()
        {
            try
            {
                return 0;
            }
            catch
            {
                throw;
            }
        }

        // Standard Method for Semi-POSIX
        public override object IOCtrl(string type, object cmd)
        {
            try
            {
                return 0;
            }
            catch
            {
                throw;
            }
        }

        public override bool IsConnection
        {
            get
            {
                try
                {
                    if (null != g.OpenDevice)
                    {
                        if(g.OpenDevice.IsOpen)
                        {
                            return true;
                        }
                    }
                    return false;
                }
                catch
                {
                    throw;
                }
            }
        }

        // Extension for CH
        public override event MsgEventHandler OnMsg;

        public override event ErrorEventHandler OnError;

        void OpenDevice_OnError(object sender, string source, Exception err)
        {

        }

        public class SharedMemory
        {
            public string memo = "";
            public double[] data = new double[2048];
        }

        void OpenDevice_OnMsg(object sender, string type, object msg)
        {
            try
            {
                switch (type)
                {
                    case "CONNECTED":
                        {
                            if (null != OnMsg)
                            {
                                OnMsg(this, "CONNECTED", null);
                            }
                        }
                        break;
                    case "DISCONNECTED":
                        {
                            OnMsg(this, "DISCONNECTED", null);
                        }
                        break;
                    case "READ":
                        {
                            byte[] pData = new byte[g.OpenDevice.ByteToRead];
                            g.OpenDevice.Read(pData, 0, pData.Length);

                            g.MemStream = new MemoryStream(pData, 0, pData.Length);

                            try
                            {
                                XmlSerializer xs = new XmlSerializer(g.config.type);
                                if (null != OnMsg)
                                {
                                    OnMsg(this, g.config.type.FullName, System.Convert.ChangeType(xs.Deserialize(g.MemStream), g.config.type));
                                }                                
                            }
                            catch (System.Exception ex)
                            {
                                OnError(this, "OpenDevice_OnMsg", ex);
                            }
                            finally
                            {
                                g.MemStream.Close();
                                g.MemStream = null;
                            }
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                OnError(this, "OpenDevice_OnMsg", ex);
            }
        }
    }
}
